description: |
  End-to-end tests for k8s integration

custom_test_key: k8s.clusterName

scenarios:
  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected.
    before:
      - helm dependency update ../charts/internal/e2e-resources
      - helm dependency update ../charts/newrelic-infrastructure
      - function ver { printf $((10#$(printf "%03d%03d" $(echo "$1" | tr '.' ' ')))); } && K8S_VERSION=$(kubectl version --short 2>&1 | grep 'Server Version' | awk -F' v' '{ print $2; }' | awk -F. '{ print $1"."$2; }') && if [[ $(ver $K8S_VERSION) -lt $(ver "1.25") ]]; then KSM_IMAGE_VERSION="v2.6.0"; else KSM_IMAGE_VERSION="v2.7.0"; fi && echo "Will use KSM image version ${KSM_IMAGE_VERSION}" && helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ../charts/internal/e2e-resources --set persistentVolume.enabled=true --set kube-state-metrics.image.tag=${KSM_IMAGE_VERSION}
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ../charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG}
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls:
#        START Deployment - Kube State Metrics
        - query: "FROM Metric SELECT latest(k8s.deployment.podsAvailable) as 'Pods Available' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Available"
              value: 1
        - query: "FROM Metric SELECT latest(k8s.deployment.podsDesired) as 'Pods Desired' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Desired"
              value: 1
        - query: "FROM Metric SELECT latest(k8s.deployment.podsTotal) as 'Pods Total' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Total"
              value: 1
        - query: "FROM Metric SELECT latest(k8s.deployment.podsUpdated) as 'Pods Updated' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Updated"
              value: 1
        - query: "FROM Metric SELECT latest(k8s.deployment.podsUnavailable) as 'Pods Unavailable' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Unavailable"
              value: 0
        - query: "FROM Metric SELECT latest(k8s.deployment.podsMissing) as 'Missing (Desired - Total)' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Missing (Desired - Total)"
              value: 0
        - query: "FROM Metric SELECT latest(k8s.deployment.podsMaxUnavailable) as 'Pods MaxUnavailable' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods MaxUnavailable"
              value: 0
        - query: "FROM Metric SELECT latest(k8s.deployment.podsReady) as 'Pods Ready' WHERE metricName = 'k8s.deployment.createdAt' and k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics'"
          expected_results:
            - key: "Pods Ready"
              value: 1
        - query: "FROM Metric SELECT max(k8s.pod.netTxBytesPerSecond) / 1000 AS 'Transferred (KBps)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Transferred (KBps)"
              lowerBoundedValue: 1
        - query: "FROM Metric SELECT max(k8s.pod.netRxBytesPerSecond) / 1000 AS 'Received (KBps)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Received (KBps)"
              lowerBoundedValue: 1
        - query: "FROM Metric SELECT max(k8s.pod.netErrorsPerSecond) AS 'Errors (per second)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Errors (per second)"
              value: 0
        - query: "FROM Metric SELECT average(k8s.container.cpuUsedCores) AS 'CPU usage (cores)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "CPU usage (cores)"
              lowerBoundedValue: 0
        - query: "FROM Metric SELECT average(k8s.container.cpuCoresUtilization) / 100 AS 'CPU utilization (%)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "CPU utilization (%)"
              value: nil
        - query: "FROM Metric SELECT sum(k8s.container.cpuCfsThrottledPeriodsDelta) / sum(k8s.container.cpuCfsPeriodsDelta) AS 'CPU throttling (%)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "CPU throttling (%)"
              value: nil
        - query: "FROM Metric SELECT average(k8s.container.memoryWorkingSetBytes) AS 'Memory usage (bytes)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Memory usage (bytes)"
              lowerBoundedValue: 10000000
              upperBoundedValue: 20000000
        - query: "FROM Metric SELECT average(k8s.container.memoryWorkingSetUtilization) / 100 AS 'Memory utilization (%)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Memory utilization (%)"
              value: nil
        - query: "FROM Metric SELECT max(k8s.container.fsUsedBytes) AS 'Filesystem used (bytes)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Filesystem used (bytes)"
              value: 32768
        - query: "FROM Metric SELECT max(k8s.container.fsUsedPercent) / 100 AS 'Filesystem Utilization (%)' WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Filesystem Utilization (%)"
              lowerBoundedValue: 0.000000664
              upperBoundedValue: 0.000000666
        - query: "SELECT sum(k8s.container.restartCountDelta) AS 'Container restarts' FROM Metric WHERE k8s.deploymentName = '${SCENARIO_TAG}-resources-kube-state-metrics' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'"
          expected_results:
            - key: "Container restarts"
              value: 0
#        END Deployment - Kube State Metrics
      entities: []
      metrics:
        - source: "k8s.yml"
          # EXCEPTIONS_SOURCE_FILE contains the path to the exceptions according to the k8s version.
          # These exceptions files live in '/e2e' path and are selected on the GH e2e workflow.
          exceptions_source: ${EXCEPTIONS_SOURCE_FILE}
          except_entities: []
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*

            - k8s.controllermanager.leaderElectionMasterStatus

            - k8s.scheduler.leaderElectionMasterStatus
            - k8s.scheduler.podPreemptionVictims
            - k8s.scheduler.preemptionAttemptsDelta
            - k8s.scheduler.schedulingDurationSeconds_*

            # Network metrics are flaky and sometimes fail
            - k8s.pod.netErrorsPerSecond
            - k8s.pod.netRxBytesPerSecond
            - k8s.pod.netTxBytesPerSecond

            # this metric does not appear when the scaler is not limited.
            - k8s.hpa.isLimited

  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected without privileges.
    before:
      - helm dependency update ../charts/internal/e2e-resources
      - helm dependency update ../charts/newrelic-infrastructure
      - function ver { printf $((10#$(printf "%03d%03d" $(echo "$1" | tr '.' ' ')))); } && K8S_VERSION=$(kubectl version --short 2>&1 | grep 'Server Version' | awk -F' v' '{ print $2; }' | awk -F. '{ print $1"."$2; }') && if [[ $(ver $K8S_VERSION) -lt $(ver "1.25") ]]; then KSM_IMAGE_VERSION="v2.6.0"; else KSM_IMAGE_VERSION="v2.7.0"; fi && echo "Will use KSM image version ${KSM_IMAGE_VERSION}" && helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ../charts/internal/e2e-resources --set persistentVolume.enabled=true --set kube-state-metrics.image.tag=${KSM_IMAGE_VERSION} 
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ../charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG} --set privileged=false
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls: []
      entities: []
      metrics:
        - source: "k8s.yml"
          exceptions_source: ${EXCEPTIONS_SOURCE_FILE}
          except_entities:
            - K8sCluster # all metrics are related to controlPlane
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*
            
            # Network metrics are flaky and sometimes fail
            - k8s.pod.netErrorsPerSecond
            - k8s.pod.netRxBytesPerSecond
            - k8s.pod.netTxBytesPerSecond

            - k8s.hpa.isLimited
